import { BaseService, BaseModel, WhereInput, LimitOffset, addQueryBuilderWhereItem } from '@joystream/warthog';
import { Brackets, SelectQueryBuilder } from 'typeorm';

type WhereExpression = {
  AND?: WhereExpression[];
  OR?: WhereExpression[];
} & WhereFilterAttributes;

interface WhereFilterAttributes {
  [key: string]: string | number | null;
}

export class WarthogBaseService<E extends BaseModel> extends BaseService<E> {
  buildFindQueryWithParams<W extends WhereInput>(
    where: WhereExpression = {},
    orderBy?: string | string[],
    pageOptions?: LimitOffset,
    fields?: string[],
    aliases: (field: string) => string | undefined = () => undefined
  ): SelectQueryBuilder<E> {
    let qb = this.buildFindQuery(where, undefined, pageOptions);

    if (fields) {
      // We always need to select ID or dataloaders will not function properly.
      if (fields.indexOf('id') === -1) {
        fields.push('id');
      }

      // Querybuilder requires you to prefix all fields with the table alias.  It also requires you to
      // specify the field name using it's TypeORM attribute name, not the camel-cased DB column name
      qb = qb.select(`${this.klass}.id`, aliases('id'));
      fields.forEach((field) => {
        if (field === 'id' || !this.columnMap[field]) {
          return;
        }

        qb = qb.addSelect(`${this.klass}.${field}`, aliases(field));
      });
    }

    qb = addOrderBy(orderBy, qb, (attr) => this.attrToDBColumn(attr));

    return qb;
  }
}

export function addOrderBy<T>(
  orderBy: string | string[] | undefined,
  qb: SelectQueryBuilder<T>,
  attrToDBColumn: (attr: string) => string
): SelectQueryBuilder<T> {
  const [attrs, directions] = parseOrderBy(orderBy);

  if (attrs.length !== directions.length) {
    throw new Error('Number of attributes and sorting directions must match');
  }

  attrs.forEach((attr: string, index: number) => {
    qb = qb.addOrderBy(attrToDBColumn(attr), directions[index].toUpperCase() as 'ASC' | 'DESC');
  });
  return qb;
}

export function parseOrderBy(
  orderBy: string | string[] | undefined
): [string[], ('asc' | 'desc')[]] {
  const attrs: string[] = [];
  const directions: ('asc' | 'desc')[] = [];
  if (orderBy) {
    if (!Array.isArray(orderBy)) {
      orderBy = [orderBy];
    }

    orderBy.forEach((orderByItem: string) => {
      const parts = orderByItem.toString().split('_');
      // TODO: ensure attr is one of the properties on the model
      const attr = parts[0];
      const direction: 'asc' | 'desc' = parts[1].toLowerCase() as 'asc' | 'desc';

      attrs.push(attr);
      directions.push(direction);
    });
  }
  return [attrs, directions];
}

export function orderByFields(orderBy: string | string[] | undefined): string[] {
  if (orderBy === undefined) {
    return [];
  }
  if (!Array.isArray(orderBy)) {
    orderBy = [(orderBy as unknown) as string];
  }
  return orderBy.map((o) => o.toString().split('_')[0]);
}
