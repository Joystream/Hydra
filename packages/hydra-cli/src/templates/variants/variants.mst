import {
  BaseModel,
  BooleanField,
  DateField,
  FloatField,
  IntField,
  NumericField,
  JSONField,
  BytesField,
  EnumField,
  StringField
} from 'warthog';
import BN from 'bn.js'

{{#imports}} 
{{{.}}};
{{/imports}}

{{#variants}}
  {{#fields}}
      {{#is.enum}}
        import { {{tsType}} } from '../enums/enums';
        export { {{tsType}} }
      {{/is.enum}}
  {{/fields}}
{{/variants}}

import { ObjectType, Field, createUnionType } from 'type-graphql';
import { getRepository, In } from 'typeorm'

{{#variants}}
@ObjectType()
export class {{name}} {
	public isTypeOf: string = '{{name}}';

  {{#fields}}
    {{#is.entity}}
      @Field(() => {{tsType}}, {
        nullable: true,
        {{#description}}description: `{{{description}}}`{{/description}}
      })
      {{camelName}}?:{{tsType}};

      // `id` of the related entity, it is required to make the relationship possible.
      @StringField({ dbOnly: true })
      {{camelName}}Id!: string;
    {{/is.entity}}

    {{#is.scalar}}
      @{{decorator}}({
        {{^required}}nullable: true,{{/required}}
        {{#description}}description: `{{{description}}}`,{{/description}}
        {{#unique}}unique: true,{{/unique}}
      })
      {{camelName}}{{^required}}?{{/required}}{{#required}}!{{/required}}: {{tsType}};
    {{/is.scalar}}

    {{#is.enum}}
      @EnumField('{{tsType}}', {{tsType}}, { 
        {{^required}}nullable: true,{{/required}} 
        {{#description}}description: `{{{description}}}`{{/description}} })
      {{camelName}}{{^required}}?{{/required}}{{#required}}!{{/required}}:{{tsType}} 
    {{/is.enum}}


    {{#is.union}}
    @Field(type => {{tsType}}, { 
        {{^required}}nullable: true,{{/required}} 
        {{#description}}description: `{{{description}}}`{{/description}} })
    {{camelName}}{{^required}}?{{/required}}{{#required}}!{{/required}}: typeof {{tsType}};
    {{/is.union}}

  {{/fields}}

  {{#fields}}
    {{#is.entity}}
      static async fetchData(records: any, unionFieldName: string) {
        const data = await getRepository({{tsType}}).find({
          where: { id: In(records.map((r: any) => r[unionFieldName].{{camelName}}Id)) }
        });
        records.map((record: any) => {
          record.status.{{camelName}} = data.find((u: any) => u.id === record[unionFieldName].{{camelName}}Id);
        });
        return records
      }
    {{/is.entity}}
  {{/fields}}
}
{{/variants}}

{{#unions}}
export const {{name}} = createUnionType({
	name: '{{name}}',
	types: () => [ {{#types}} {{name}}, {{/types}} ],
	resolveType: value => (value.isTypeOf ? value.isTypeOf : undefined)
});
{{/unions}}