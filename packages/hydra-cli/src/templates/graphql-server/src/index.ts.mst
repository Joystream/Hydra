import 'reflect-metadata';

import { SnakeNamingStrategy } from '@joystream/warthog';
import { snakeCase } from 'typeorm/util/StringUtils';

import { loadConfig } from '../src/config';
import { Logger } from '../src/logger';

import { buildServerSchema, getServer } from './server';
import { queryTemplates } from './queryTemplates';
import { createProcessorStateApp } from './processorStateApp';

import { EnvelopArmor } from "@escape.tech/graphql-armor";

class CustomNamingStrategy extends SnakeNamingStrategy {
  constructor() {
    super();
  }

  tableName(className: string, customName?: string): string {
    return customName || `${snakeCase(className)}`;
  }
}

function getArmorConfig() {
  if (process.env.GRAPHQL_ENABLE_PROTECTION === 'true') {
    const armor = new EnvelopArmor({
        blockFieldSuggestion: {
          enabled: false,
        },
        maxDepth: {
          enabled: true,
          n: 3,
        },
        maxAliases: {
          enabled: true,
          n: 5,
        },
        //characterLimit: {
        //  enabled: true,
        //  maxLength: 1000,
        //},
        maxDirectives: {
          enabled: true,
          n: 0,
        },
    });

    const config = armor.protect();
    const { plugins } = config;
    Logger.info(`Enabling GraphQL Armor with ${plugins.length} plugins.`);
    return config
  } else {
    return {};
  }
}

function prepareServer() {
  loadConfig();

  const armor = getArmorConfig();

  const server = getServer(
    {
      playgroundConfig: {
        version: process.env.GRAPHQL_PLAYGROUND_VERSION || undefined,
        cdnUrl: process.env.GRAPHQL_PLAYGROUND_CDN_URL || undefined,
        endpoint: process.env.GRAPHQL_PLAYGROUND_ENDPOINT || undefined,
        subscriptionEndpoint: process.env.GRAPHQL_PLAYGROUND_SUBSCRIPTION_ENDPOINT || undefined,
        queryTemplates,
      },
      ...armor,
    },
    {
      namingStrategy: new CustomNamingStrategy(),
      maxQueryExecutionTime: 1000,
      logging: [process.env.WARTHOG_DB_LOGGING || 'error'],
      extra: {
        poolSize: 10,
        //cache: {
        //
        //}
      },
    }
  );

  return server;
}

async function bootstrap() {
  const server = prepareServer();

  const syncDatabase: string | undefined = process.env.SYNC;
  if (syncDatabase === 'true') {
    await server.establishDBConnection();
    process.exit(0);
  }

  await buildServerSchema(server);
  await server.start();
  const processorStateApp = createProcessorStateApp(process.env.PROCESSOR_HOST || 'localhost');
  processorStateApp.listen(parseInt(process.env.PROCESSOR_STATE_APP_PORT || '8082'), '0.0.0.0');
}

bootstrap().catch((error: Error) => {
  Logger.error(error);
  if (error.stack) {
    Logger.error(error.stack.split('\n'));
  }
  process.exit(1);
});
