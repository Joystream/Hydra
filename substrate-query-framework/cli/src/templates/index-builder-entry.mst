import "reflect-metadata";
import * as dotenv from "dotenv";
import * as chalk from "chalk";
import * as figlet from "figlet";
import * as commander from "commander";
import { configure, getLogger } from "log4js";

import {
  QueryNodeManager,
  BootstrapPack,
  BootstrapFunc,
  DatabaseManager,
  SubstrateEvent,
  createDBConnection,
  SavedEntityEvent
} from '@dzlzv/hydra-indexer-lib/lib';

// Mappings use!
export { DatabaseManager as DB, getLogger, SubstrateEvent };

const logger = getLogger();

function getProcessingPack() {
  const handlers = require("../../mappings");

  let processingPack: { [key: string]: any } = {};

  Object.keys(handlers)
    .filter((handler) => handler.startsWith("handle"))
    .map((handler: string) => {
      let eventName = handler.replace("handle", "");
      processingPack[eventName] = handlers[handler];
    });
  return processingPack;
}

function getBootstrapPack() {
  const bootstrapPack: BootstrapPack = { pack: [] };
  if (!process.env.BOOTSTRAP_PACK_LOCATION) {
    // TODO: very basic, we should read form the config file
    throw new Error(`No boostrap location found. 
Please set BOOTSTRAP_FILE_LOCATION environment variable`);
  }
  let handlers: { [key: string]: BootstrapFunc } = {};
  try {
    handlers = require(process.env.BOOTSTRAP_PACK_LOCATION);
  } catch (e) {
    throw new Error(
      `Cannot load bootstrap mappings from ${process.env.BOOTSTRAP_FILE_LOCATION}: ${e}`
    );
  }

  Object.keys(handlers)
    .filter((handler) => handler.startsWith("boot"))
    .map((handler: string) => bootstrapPack.pack.push(handlers[handler]));

  return bootstrapPack;
}

const withErrors = (command: (...args: any[]) => Promise<void>) => {
  return async (...args: any[])=> {
    try {
      await command(...args)
    } catch(e) {
      console.log(chalk.red(e.stack));
      process.exit(1);
    }
  }
}

const withEnvs = (command: () => Promise<void>) => {
  return async (opts: any) => {
    setUp(opts);
    await command();
  }
}


function main(): commander.Command {
  console.log(chalk.green(figlet.textSync("{{projectName}}-Indexer")));
  const program = new commander.Command();
  const version = require("./package.json").version;

  program
    .version(version)
    .description("{{projectName}} Indexer");

  program
    .command('bootstrap')
    .description('Bootstrap the model with boot* handlers')
    .action(withErrors(withEnvs(runBootstrap)));  

  program
    .command('index')
    .option('-h, --height', 'starting block height')
    .option('-e, --env <file>', '.env file location', '../../.env')
    .description('Index all events and extrinsics in the substrate chain')
    .action(withErrors(withEnvs(runIndexer)));

  program
    .command('process')
    .option('-h, --height', 'starting block height')
    .option('-e, --env <file>', '.env file location', '../../.env')
    .description('Process the event and extrinsic mappings using the index')
    .action(withErrors(withEnvs(runProcessor)));

  program
    .command('migrate')
    .description('Create the indexer schema')
    .option('-e, --env <file>', '.env file location', '../../.env')
    .action(withErrors(withEnvs(runMigrations)));
    
  program.parse(process.argv);

  return program;
}

function setUp(opts: any) {
  if (opts.bootstrap) {
    process.env.QUERY_NODE_BOOTSTRAP_DB = "true";
  }

  // dotenv config
  dotenv.config(); 
  dotenv.config({ path: opts.env });

  if (opts.height) {
    process.env.BLOCK_HEIGHT = opts.height;
  } else if (!process.env.BLOCK_HEIGHT) {
    process.env.BLOCK_HEIGHT = '0';
  }

  //log4js config
  if (opts.logging) {
    configure(opts.logging);
  } else {
    // log4js default: DEBUG to console output;
    getLogger().level = 'debug';
  }
}

async function runBootstrap() {
  const node = new QueryNodeManager();
  await node.bootstrap({
    wsProviderURI: process.env.WS_PROVIDER_ENDPOINT_URI || '',
    processingPack: getBootstrapPack(),
    {{#typeRegistrator}}typeRegistrator: {{typeRegistrator}} {{/typeRegistrator}}
  });

  logger.info("Bootstrap done");
}

async function runProcessor() {
  const node = new QueryNodeManager();
  const atBlock = process.env.BLOCK_HEIGHT;
  await node.process({
    atBlock: atBlock && atBlock !== '0' ? Number.parseInt(atBlock) : undefined,
    processingPack: getProcessingPack(),
  });
}

async function runIndexer() {
  const node = new QueryNodeManager();
  const atBlock = process.env.BLOCK_HEIGHT;
  await node.index({
    wsProviderURI: process.env.WS_PROVIDER_ENDPOINT_URI || '',
    atBlock: atBlock && atBlock !== '0' ? Number.parseInt(atBlock) : undefined,
    {{#typeRegistrator}}typeRegistrator: {{typeRegistrator}} {{/typeRegistrator}}
  });
}

async function runMigrations() {
  logger.info(`Running migrations`);
  await new QueryNodeManager().migrate();
  // TODO: here should be TypeORM migrations...
}


main();


