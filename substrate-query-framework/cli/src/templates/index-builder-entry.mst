import "reflect-metadata";
import * as dotenv from "dotenv";
import * as chalk from 'chalk';
import * as figlet from 'figlet';
import { Command } from 'commander';
import { configure, getLogger } from 'log4js';

import { createConnection } from "typeorm";
import { {{typeRegistrator}} } from '{{{packageName}}}';
import {
  QueryNodeManager,
  BootstrapPack,
  DB
} from "index-builder/lib";

// Mappings use!
export { 
    DB 
};

function getProcessingPack() {
  const handlers = require("../../mappings");

  let processingPack: { [key: string]: any } = {};

  Object.keys(handlers)
    .filter(handler => handler.startsWith("handle"))
    .map((handler: string) => {
      let eventName = handler.replace("handle", "");
      processingPack[eventName] = handlers[handler];
    });
  return processingPack;
}

function getBootstrapPack() {
  const bootstrapPack: BootstrapPack = { pack: [] };
  const handlers = require("../../mappings");

  Object.keys(handlers)
    .filter(handler => handler.startsWith("boot"))
    .map((handler: string) => bootstrapPack.pack.push(handlers[handler]));

  return bootstrapPack;
}

function banner():Command {
    console.log(
        chalk.green(
          figlet.textSync('Joystream-Indexer')
        )
    );
    const command = new Command();
    const version = require('./package.json').version;

    command
        .version(version)
        .description("Joystream Indexer")
        .option('-l, --logging <file>', 'Path to log4js config', null)
        .option('-b, --bootstrap', 'Bootstrap data')
        .option('-B, --force-bootstrap', 'Force bootstrap even if there are bootstrap checkmarks')
        .option('-h, --height <height>', 'Block height to start from', 0)
        .option('-e, --env <file>', '.env file location', '../../.env')
        .parse(process.argv);
    
    return command;
}

function setUp(command: Command) {
    
    if (command.bootstrap) {
        process.env.QUERY_NODE_BOOTSTRAP_DB = 'true'; 
    }
    if (command.force_bootstrap) {
        process.env.FORCE_BOOTSTRAP = 'true';     
    }
    const height:string = command.height || '0';
    process.env.BLOCK_HEIGHT = height;
    
    // dotenv config
    dotenv.config({ path: command.env });

    //log4js config
    if (command.logging) {
        configure(command.logging)
    } else {
        // log4js default: DEBUG to console output;
        getLogger().level = 'debug';
    }
    
}

async function doBootstrap(node: QueryNodeManager) {
    try {
        await node.start(
          process.env.WS_PROVIDER_ENDPOINT_URI as string,
          {},
          {{typeRegistrator}},
          getBootstrapPack()
        );
        console.log("Bootstrap done");
        process.exit(0);
    } catch (error) {
        console.error(error);
        process.exit(1);
    }
}

async function main() {
  const command = banner();  
  setUp(command);
  
  const providerUri = process.env.WS_PROVIDER_ENDPOINT_URI;

  if (!providerUri) {
    console.error(
      "WS_PROVIDER_ENDPOINT_URI environment variable is not set! Make sure you set it in your .env file or system wide."
    );
    process.exit(1);
  }

  const conn = await createConnection();

  const node = new QueryNodeManager(process);

  const bootstrap = process.env.QUERY_NODE_BOOTSTRAP_DB;
  if (bootstrap) {
    doBootstrap(node) 
  }

  node.start(providerUri, getProcessingPack(), {{typeRegistrator}});
}

main();