import { registerJoystreamTypes } from '@joystream/types';
import { config } from 'dotenv';
import { createConnection } from 'typeorm';

const handlers = require('../../mappings');
import { QueryNodeManager } from 'substrate-query-node/lib/query-node';

// Each mapping will receive a parameter which is type of QueryEvent
// so we are going to export this class
export { QueryEvent } from "substrate-query-node/lib/index-builder";


function getProcessingPack() {
  let processingPack: { [key: string]: any } = {};

  Object.keys(handlers).map((handler: string) => {
    let eventName = handler.replace('handle', '');
    processingPack[eventName] = handlers[handler];
  });
  return processingPack;
}

async function main() {
  // Load from .env
  config({ path: '../../.env' });

  const providerUri = process.env.WS_PROVIDER_ENDPOINT_URI;

  if (!providerUri) {
    console.error(
      'WS_PROVIDER_ENDPOINT_URI environment variable is not set! Make sure you set it in your .env file or system wide.'
    );
    process.exit(1);
  }

  await createConnection();

  const node = new QueryNodeManager(process);
  node.start(providerUri, getProcessingPack(), registerJoystreamTypes);
}

main();
