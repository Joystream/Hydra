" All transfers "
type Transfer @entity {
  from: Bytes!
  to: Bytes!
  fromAccount: Account
  toAccount: Account
  value: BigInt!
  comment: String @fulltext(query: "commentSearch")
  block: Int!
  tip: BigInt!
  timestamp: BigInt!
  insertedAt: DateTime!
}

" Tracks block timestamps "
type BlockTimestamp @entity {
  blockNumber: Int!
  timestamp: BigInt!
}

" Tracks block hooks "
type BlockHook @entity {
  blockNumber: Int!
  type: HookType!
  timestamp: BlockTimestamp
}

enum HookType {
  PRE
  POST
}

type Account @entity {
  "Account address"
  id: ID!
  hex: String!
  balance: BigInt!
  status: Status!
  incomingTx: [Transfer!] @derivedFrom(field: "toAccount")
  outgoingTx: [Transfer!] @derivedFrom(field: "fromAccount")
}

type Miserable @variant {
  hates: String!
}

type HappyPoor @variant {
  isMale: Boolean
}

union Poor = HappyPoor | Miserable

type MiddleClass @variant {
  father: Poor
  mother: Poor
}

union Status = MiddleClass | HappyPoor | Miserable

############## Test purpose only @hydra-e2e-tests #################
# To make sure graphql api is generated as expected
type Extrinsic @entity {
  id: ID!
  hash: String!
}
interface Event @entity {
  indexInBlock: Int!
  inExtrinsic: Extrinsic
}
type BoughtMemberEvent implements Event @entity {
  id: ID!
  indexInBlock: Int!
  inExtrinsic: Extrinsic
}
###################################################
