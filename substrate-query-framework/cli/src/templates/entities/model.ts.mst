import {
  BaseModel,
  {{#has.bool}}BooleanField,{{/has.bool}}
  {{#has.date}}DateField,{{/has.date}}
  {{#has.float}}FloatField,{{/has.float}}
  {{#has.int}}IntField,{{/has.int}}
  {{#has.numeric}}NumericField,{{/has.numeric}}
  {{#has.json}}JSONField,{{/has.json}}
  {{#has.bytes}}BytesField,{{/has.bytes}}
  Model,
  {{#has.mto}}ManyToOne,{{/has.mto}}
  {{#has.otm}}OneToMany,{{/has.otm}}
  {{#has.oto}}OneToOne, JoinColumn,{{/has.oto}}
  {{#has.array}}CustomField,{{/has.array}}
  {{#has.enum}}EnumField,{{/has.enum}}
  StringField
} from 'warthog';  {{! we don't need extra twists here }}

{{#isInterface}}
import { InterfaceType } from 'type-graphql';
{{/isInterface}}

{{#fields}}
  {{#is.refType}}
  import { {{relClassName}} } from '{{{relPathForModel}}}'
  {{/is.refType}}
{{/fields}}

{{#enums}}
  import { {{name}} } from '../enums/enums';
  {{#export}}
  export { {{name}} }; {{! we need to re-export enums for type-GraphQL to resolve types correctly, but only once }}
  {{/export}}
{{/enums}}

{{#interfaces}}
  import { {{className}} } from '../{{kebabName}}/{{kebabName}}.model';
{{/interfaces}}

{{^isInterface}}
@Model({{#interfaces}} { api: { implements: {{className}} }} {{/interfaces}}) {{! only a single interface can be here }}
{{/isInterface}}
{{#isInterface}}
@InterfaceType()
{{/isInterface}}
export {{#isInterface}}abstract{{/isInterface}} class {{className}} 
  extends {{^interfaces}}BaseModel{{/interfaces}} {{#interfaces}} {{className}} {{/interfaces}} {

{{#fields}}
  {{#is.otm}}
    @OneToMany(() => {{relClassName}}, ({{relCamelName}}: {{relClassName}}) => {{relCamelName}}.{{relFieldName}})
    {{camelNamePlural}}?: {{relClassName}}[];  
  {{/is.otm}}

  {{#is.mto}}
    @ManyToOne(() => {{relClassName}}, ({{relCamelName}}: {{relClassName}}) => {{relCamelName}}.{{relFieldNamePlural}}, { 
      skipGraphQLField: true{{^required}},
      nullable: true{{/required}} 
    })
    {{camelName}}{{^required}}?{{/required}}{{#required}}!{{/required}}: {{relClassName}};
  {{/is.mto}}

  {{#is.oto}}
    @OneToOne(() => {{relClassName}})
    @JoinColumn()
    {{camelName}}?: {{relClassName}};
  {{/is.oto}}

  {{#is.array}}
    @CustomField({ db: { type: '{{dbType}}', array: true{{^required}}, nullable: true{{/required}} }, 
        api: { type: '{{apiType}}'{{^required}}, nullable: true{{/required}} }})
    {{camelName}}{{^required}}?{{/required}}{{#required}}!{{/required}}: {{tsType}}[];
  {{/is.array}}

  {{! TODO: add enums here }}
  {{#is.scalar}}
    @{{decorator}}({{^required}}{ nullable: true }{{/required}})
    {{camelName}}{{^required}}?{{/required}}{{#required}}!{{/required}}: {{tsType}};
  {{/is.scalar}}

  {{#is.enum}}
    @EnumField('{{tsType}}', {{tsType}} {{^required}},{ nullable: true }{{/required}})
    {{camelName}}{{^required}}?{{/required}}{{#required}}!{{/required}}:{{tsType}} 
  {{/is.enum}}
{{/fields}}
}
