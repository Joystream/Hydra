import {
  Arg,
  Args,
  Mutation,
  Query,
  Root,
  Resolver,
  FieldResolver,
  ObjectType,
  Field,
  Int,
  ArgsType,
  Info
} from 'type-graphql';
import graphqlFields from 'graphql-fields';
import { Inject } from 'typedi';
import { Min } from 'class-validator'
import { Fields, StandardDeleteResponse, UserId, PageInfo, RawFields } from 'warthog';

import {
  {{className}}CreateInput,
  {{className}}CreateManyArgs,
  {{className}}UpdateArgs,
  {{className}}WhereArgs,
  {{className}}WhereInput,
  {{className}}WhereUniqueInput,
  {{className}}OrderByEnum,
} from '{{{generatedFolderRelPath}}}';

import { {{className}} } from './{{kebabName}}.model';
import { {{className}}Service } from './{{kebabName}}.service';

{{#fieldResolverImports}}
  {{{.}}}
{{/fieldResolverImports}}

{{! Pagination objects -- }}

@ObjectType()
export class {{className}}Edge {
  @Field(() => {{className}}, { nullable: false })
  node!: {{className}};

  @Field(() => String, { nullable: false })
  cursor!: string;
}

@ObjectType()
export class {{className}}Connection {
  @Field(() => Int, { nullable: false })
  totalCount!: number;

  @Field(() => [{{className}}Edge], { nullable: false })
  edges!: {{className}}Edge[];

  @Field(() => PageInfo, { nullable: false })
  pageInfo!: PageInfo;
}

@ArgsType()
export class ConnectionPageInputOptions {
  @Field(() => Int, { nullable: true })
  @Min(0)
  first?: number

  @Field(() => String, { nullable: true })
  after?: string // V3: TODO: should we make a RelayCursor scalar?

  @Field(() => Int, { nullable: true })
  @Min(0)
  last?: number

  @Field(() => String, { nullable: true })
  before?: string
}

@ArgsType()
export class {{className}}ConnectionWhereArgs extends ConnectionPageInputOptions {
  @Field(() => {{className}}WhereInput, { nullable: true })
  where?: {{className}}WhereInput;

  @Field(() => {{className}}OrderByEnum, { nullable: true })
  orderBy?: {{className}}OrderByEnum;
}

{{! -- Pagination objects }}

@Resolver({{className}})
export class {{className}}Resolver {
  constructor(
    @Inject('{{className}}Service') public readonly service: {{className}}Service,
    {{#fieldResolvers}}
      @Inject('{{returnTypeFunc}}Service') public readonly {{fieldName}}Service: {{returnTypeFunc}}Service,
    {{/fieldResolvers}}
  ) {}

  @Query(() => [{{className}}])
  async {{camelNamePlural}}(
    @Args() { where, orderBy, limit, offset }: {{className}}WhereArgs,
    @Fields() fields: string[]
  ): Promise<{{className}}[]> {
    {{#crossFilters}}
    if (where) {
      const id_in = where.id_in;

      {{#fieldResolvers}}
        {{#relationType.isOTO}}
        const { {{fieldName}} } = where 
        if ({{fieldName}}) {
          where.id_in = (
            await this.{{fieldName}}Service
              .getQueryBuilder({{fieldName}})
              .leftJoinAndSelect('{{tableName}}.{{relatedTsProp}}', '{{relatedTsProp}}')
              .getMany()
          )
            .filter(f => f.{{relatedTsProp}})
            .map(f => f.{{relatedTsProp}}!.id);
          delete where.{{fieldName}};
        }
        {{/relationType.isOTO}}

        {{#relationType.isModifier}}
          const { {{fieldName}}_some, {{fieldName}}_none, {{fieldName}}_every } = where
          if ({{fieldName}}_some || {{fieldName}}_none || {{fieldName}}_every) {
            const result = await this.{{fieldName}}Service
              .getQueryBuilder({{fieldName}}_some || {{fieldName}}_none || {{fieldName}}_every)
              .leftJoinAndSelect('{{tableName}}.{{relatedTsProp}}', '{{relatedTsProp}}')
              .getMany();
            let {{relatedTsProp}}Ids: string[] = []
            {{#relationType.isOTM}}
            {{relatedTsProp}}Ids = Array.from(new Set(result.map(v => v.{{relatedTsProp}}.id)));
            {{/relationType.isOTM}}
            {{#relationType.isMTM}}
            Array.from(new Set(result.map(v => v.{{relatedTsProp}}.map(c => {{relatedTsProp}}Ids.push(c.id)))));
            {{/relationType.isMTM}}

            delete where.{{fieldName}}_some
            delete where.{{fieldName}}_none
            delete where.{{fieldName}}_every

            {{#relationType.isOTM}}
            if ({{fieldName}}_some) {
              where.id_in = {{relatedTsProp}}Ids;
            }
            {{/relationType.isOTM}}

            {{#relationType.isMTM}}
            if ({{fieldName}}_some || {{fieldName}}_every) {
              where.id_in = {{relatedTsProp}}Ids;
            }
            {{/relationType.isMTM}}
            

            if ({{fieldName}}_none) {
              where.id_in = (
                await getRepository({{returnTypeFunc}}).find({
                  select: ['id'],
                  where: { id: Not(In({{relatedTsProp}}Ids)) }
                })
              ).map(c => c.id);
            }

            {{#relationType.isOTM}}
            if ({{fieldName}}_every) {
              getConnection().transaction(async em => {
                const finalIds = [];

                // Group entity
                const g = _.chain(result)
                  .groupBy(v => v.{{relatedTsProp}}.id)
                  .value();

                // Get all entities with their relations without filtering them
                for (const { id, {{fieldName}} } of await em.getRepository({{rootArgType}}).find({
                  where: { id: In({{relatedTsProp}}Ids) },
                  relations: ['{{fieldName}}']
                })) {
                  if ({{fieldName}} && {{fieldName}}.length === g[id].length) {
                    finalIds.push(id);
                  }
                }
                where.id_in = finalIds;
              });
            }
            {{/relationType.isOTM}}
          }
        {{/relationType.isModifier}}

        {{#relationType.isMTO}}
        const { {{fieldName}} } = where 
        if ({{fieldName}}) {
          const entityIds: string[] = [];
          (
            await this.{{fieldName}}Service
              .getQueryBuilder({{fieldName}})
              .leftJoinAndSelect('{{tableName}}.{{relatedTsProp}}', '{{relatedTsProp}}')
              .getMany()
          ).map((c: any) => entityIds.push(...c.{{relatedTsProp}}!.map((v: any) => v.id)));
          where.id_in = entityIds;
          delete where.{{fieldName}};
        }
        {{/relationType.isMTO}}
      {{/fieldResolvers}}
      
      if (id_in) {
        where.id_in = where.id_in ? [...id_in, ...where.id_in] : id_in;
      }
    }
    {{/crossFilters}}
    return this.service.find<{{className}}WhereInput>(where, orderBy, limit, offset, fields);
  }

  @Query(() => {{className}}, { nullable: true })
  async {{camelName}}ByUniqueInput(
    @Arg('where') where: {{className}}WhereUniqueInput,
    @Fields() fields: string[]
  ): Promise<{{className}} | null> {
    const result = await this.service.find(where, undefined, 1, 0, fields);
    return result && result.length >= 1 ? result[0] : null;
  }

  @Query(() => {{className}}Connection)
  async {{camelNamePlural}}Connection(
    @Args() { where, orderBy, ...pageOptions }: {{className}}ConnectionWhereArgs,
    @Info() info: any
  ): Promise<{{className}}Connection> {
    
    const rawFields = graphqlFields(info, {}, { excludedFields: ['__typename'] });

    let result: any = {
      totalCount: 0,
      edges: [],
      pageInfo: {
        hasNextPage: false,
        hasPreviousPage: false
      }
    };
    // If the related database table does not have any records then an error is thrown to the client
    // by warthog
    try {
      result = await this.service.findConnection<{{className}}WhereInput>(
        where,
        orderBy,
        pageOptions,
        rawFields
      );
    } catch (err) {
      console.log(err);
      // TODO: should continue to return this on `Error: Items is empty` or throw the error
      if (!(err.message as string).includes('Items is empty')) throw err;
    }

    return result as Promise<{{className}}Connection>;
  }

  {{#fieldResolvers}}
    @FieldResolver(() => {{returnTypeFunc}})
    async {{fieldName}}(@Root() {{rootArgName}}: {{rootArgType}}): {{{returnType}}} {
      const result = await getConnection().getRepository({{rootArgType}}).findOne({{rootArgName}}.id, { relations: ['{{fieldName}}'] })
      if (result && result.{{fieldName}} !== undefined) {
        return result.{{fieldName}};
      }
      return null;
    }

  {{/fieldResolvers}}
}