import {
  Arg,
  Args,
  Mutation,
  Query,
  Root,
  Resolver,
  FieldResolver,
  ObjectType,
  Field,
  Int,
  ArgsType,
  Info
} from 'type-graphql';
import graphqlFields from 'graphql-fields';
import { Inject } from 'typedi';
import { Min } from 'class-validator'
import { Fields, StandardDeleteResponse, UserId, PageInfo, RawFields, NestedFields } from 'warthog';

import { mergeParameterKeys } from '../../utils';

import {
  {{className}}CreateInput,
  {{className}}CreateManyArgs,
  {{className}}UpdateArgs,
  {{className}}WhereArgs,
  {{className}}WhereInput,
  {{className}}WhereUniqueInput,
  {{className}}OrderByEnum,
} from '{{{generatedFolderRelPath}}}';

import { {{className}} } from './{{kebabName}}.model';
import { {{className}}Service } from './{{kebabName}}.service';

{{#fieldResolverImports}}
  {{{.}}}
{{/fieldResolverImports}}

{{! Pagination objects -- }}

@ObjectType()
export class {{className}}Edge {
  @Field(() => {{className}}, { nullable: false })
  node!: {{className}};

  @Field(() => String, { nullable: false })
  cursor!: string;
}

@ObjectType()
export class {{className}}Connection {
  @Field(() => Int, { nullable: false })
  totalCount!: number;

  @Field(() => [{{className}}Edge], { nullable: false })
  edges!: {{className}}Edge[];

  @Field(() => PageInfo, { nullable: false })
  pageInfo!: PageInfo;
}

@ArgsType()
export class ConnectionPageInputOptions {
  @Field(() => Int, { nullable: true })
  @Min(0)
  first?: number

  @Field(() => String, { nullable: true })
  after?: string // V3: TODO: should we make a RelayCursor scalar?

  @Field(() => Int, { nullable: true })
  @Min(0)
  last?: number

  @Field(() => String, { nullable: true })
  before?: string
}

@ArgsType()
export class {{className}}ConnectionWhereArgs extends ConnectionPageInputOptions {
  @Field(() => {{className}}WhereInput, { nullable: true })
  where?: {{className}}WhereInput;

  @Field(() => {{className}}OrderByEnum, { nullable: true })
  orderBy?: [{{className}}OrderByEnum];
}

{{! -- Pagination objects }}

@Resolver({{className}})
export class {{className}}Resolver {
  constructor(
    @Inject('{{className}}Service') public readonly service: {{className}}Service,
    {{#fieldResolvers}}
      @Inject('{{returnTypeFunc}}Service') public readonly {{fieldName}}Service: {{returnTypeFunc}}Service,
    {{/fieldResolvers}}
  ) {}

  @Query(() => [{{className}}])
  async {{camelNamePlural}}(
    @Args() { where: _where, orderBy, limit, offset }: {{className}}WhereArgs,
    @Fields() fields: string[]
  ): Promise<{{className}}[]> {
    const where = <{{className}}WhereInput>(_where || {})

    {{#fieldResolvers}}
    // remove relation filters to enable warthog query builders 
    {{#relationType.isTO}}
        const { {{fieldName}} } = where 
        delete where.{{fieldName}};
    {{/relationType.isTO}}
    
    {{#relationType.isTM}}
        const { {{fieldName}}_some, {{fieldName}}_none, {{fieldName}}_every } = where 
        
        if ((+!!{{fieldName}}_some) + (+!!{{fieldName}}_none) + (+!!{{fieldName}}_every) > 1) {
            throw new Error(`A query can have at most one of none, some, every clauses on a relation field`)
        }

        delete where.{{fieldName}}_some;
        delete where.{{fieldName}}_none;
        delete where.{{fieldName}}_every;
    {{/relationType.isTM}}    
    {{/fieldResolvers}}

    let mainQuery = this.service.buildFindQueryWithParams(
      <any>where,
      orderBy,
      undefined,
      fields,
      'main'
    ).take(undefined); // remove LIMIT

    let parameters = mergeParameterKeys({}, 'main', mainQuery.getQueryAndParameters()[1]);

    {{#crossFilters}}
    
    {{#fieldResolvers}}
        {{#relationType.isTO}}
        
        if ({{fieldName}}) {
          // OTO or MTO
          const {{fieldName}}Query = this.{{fieldName}}Service.buildFindQueryWithParams(
                <any>{{fieldName}},
                undefined,
                undefined,
                ['id'],
                '{{fieldName}}'
            ).take(undefined); // remove the default LIMIT 


          mainQuery = mainQuery
            .leftJoin('{{typeormAliasName}}.{{fieldName}}', '{{fieldName}}')
            .andWhere(`{{fieldName}}.id IN (${ {{fieldName}}Query.getQuery() })`);

          parameters = parameters = mergeParameterKeys(
                parameters,
                '{{fieldName}}',
                {{fieldName}}Query.getQueryAndParameters()[1]);;
          
        }
        {{/relationType.isTO}}

        {{#relationType.isTM}}
       
          const {{fieldName}}Filter = {{fieldName}}_some || {{fieldName}}_none || {{fieldName}}_every

          if ({{fieldName}}Filter) {

            const {{fieldName}}Query = this.{{fieldName}}Service.buildFindQueryWithParams(<any>{{fieldName}}Filter,
                undefined,
                undefined,
                ['id'],
                '{{fieldName}}'
            ).take(undefined); //remove the default LIMIT

            parameters = mergeParameterKeys(
                parameters,
                '{{fieldName}}',
                {{fieldName}}Query.getQueryAndParameters()[1]);

            const subQueryFiltered = this.service
                .getQueryBuilder()
                .select([])
                .leftJoin(
                '{{typeormAliasName}}.{{fieldName}}',
                '{{fieldName}}_filtered',
                `{{fieldName}}_filtered.id IN (${ {{fieldName}}Query.getQuery() })`
                )
                .groupBy('{{typeormAliasName}}_id')
                .addSelect('count({{fieldName}}_filtered.id)', 'cnt_filtered')
                .addSelect('{{typeormAliasName}}.id', '{{typeormAliasName}}_id');

            const subQueryTotal = this.service
                .getQueryBuilder()
                .select([])
                .leftJoin('{{typeormAliasName}}.{{fieldName}}', '{{fieldName}}_total')
                .groupBy('{{typeormAliasName}}_id')
                .addSelect('count({{fieldName}}_total.id)', 'cnt_total')
                .addSelect('{{typeormAliasName}}.id', '{{typeormAliasName}}_id');

            const subQuery = `
                SELECT 
                    f.{{typeormAliasName}}_id {{typeormAliasName}}_id, f.cnt_filtered cnt_filtered, t.cnt_total cnt_total 
                FROM 
                    (${subQueryTotal.getQuery()}) t, (${subQueryFiltered.getQuery()}) f 
                WHERE 
                    t.{{typeormAliasName}}_id = f.{{typeormAliasName}}_id`;


            if ({{fieldName}}_none) {
              mainQuery = mainQuery.andWhere(`{{typeormAliasName}}.id IN 
                (SELECT 
                    {{fieldName}}_subq.{{typeormAliasName}}_id
                FROM 
                    (${subQuery}) {{fieldName}}_subq 
                WHERE 
                    {{fieldName}}_subq.cnt_filtered = 0
                )`)
            }

            if ({{fieldName}}_some) {
              mainQuery = mainQuery.andWhere(`{{typeormAliasName}}.id IN 
                (SELECT 
                    {{fieldName}}_subq.{{typeormAliasName}}_id
                FROM 
                    (${subQuery}) {{fieldName}}_subq 
                WHERE 
                    {{fieldName}}_subq.cnt_filtered > 0
                )`)
            }

            if ({{fieldName}}_every) {
              mainQuery = mainQuery.andWhere(`{{typeormAliasName}}.id IN 
                (SELECT 
                    {{fieldName}}_subq.{{typeormAliasName}}_id
                FROM 
                    (${subQuery}) {{fieldName}}_subq 
                WHERE 
                    {{fieldName}}_subq.cnt_filtered > 0 
                    AND {{fieldName}}_subq.cnt_filtered = {{fieldName}}_subq.cnt_total
                )`)
            }
          }
        {{/relationType.isTM}}

    {{/fieldResolvers}}
    
    {{/crossFilters}}

    mainQuery = mainQuery.setParameters(parameters);

    return mainQuery.take(limit || 50).skip(offset || 0).getMany();
  }

  @Query(() => {{className}}, { nullable: true })
  async {{camelName}}ByUniqueInput(
    @Arg('where') where: {{className}}WhereUniqueInput,
    @Fields() fields: string[]
  ): Promise<{{className}} | null> {
    const result = await this.service.find(where, undefined, 1, 0, fields);
    return result && result.length >= 1 ? result[0] : null;
  }

  @Query(() => {{className}}Connection)
  async {{camelNamePlural}}Connection(
    @Args() { where, orderBy, ...pageOptions }: {{className}}ConnectionWhereArgs,
    @Info() info: any
  ): Promise<{{className}}Connection> {
    
    const rawFields = graphqlFields(info, {}, { excludedFields: ['__typename'] });

    let result: any = {
      totalCount: 0,
      edges: [],
      pageInfo: {
        hasNextPage: false,
        hasPreviousPage: false
      }
    };
    // If the related database table does not have any records then an error is thrown to the client
    // by warthog
    try {
      result = await this.service.findConnection<{{className}}WhereInput>(
        where,
        orderBy,
        pageOptions,
        rawFields
      );
    } catch (err) {
      console.log(err);
      // TODO: should continue to return this on `Error: Items is empty` or throw the error
      if (!(err.message as string).includes('Items is empty')) throw err;
    }

    return result as Promise<{{className}}Connection>;
  }

  {{#fieldResolvers}}
    @FieldResolver(() => {{returnTypeFunc}})
    async {{fieldName}}(@Root() {{rootArgName}}: {{rootArgType}}): {{{returnType}}} {
      const result = await getConnection().getRepository({{rootArgType}}).findOne({{rootArgName}}.id, { relations: ['{{fieldName}}'] })
      if (result && result.{{fieldName}} !== undefined) {
        return result.{{fieldName}};
      }
      return null;
    }

  {{/fieldResolvers}}
}