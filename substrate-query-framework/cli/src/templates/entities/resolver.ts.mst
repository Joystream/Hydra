import { Arg, Args, Mutation, Query, Resolver } from 'type-graphql';
import { Inject } from 'typedi';
import { Fields, StandardDeleteResponse, UserId } from 'warthog';

import {
  {{className}}CreateInput,
  {{className}}CreateManyArgs,
  {{className}}UpdateArgs,
  {{className}}WhereArgs,
  {{className}}WhereInput,
  {{className}}WhereUniqueInput
} from '{{{generatedFolderRelPath}}}';

import { {{className}} } from './{{kebabName}}.model';
import { {{className}}Service } from './{{kebabName}}.service';

@Resolver({{className}})
export class {{className}}Resolver {
  constructor(@Inject('{{className}}Service') public readonly service: {{className}}Service) {}

  @Query(() => [{{className}}])
  async {{camelNamePlural}}(
    @Args() { where, orderBy, limit, offset }: {{className}}WhereArgs,
    @Fields() fields: string[]
  ): Promise<{{className}}[]> {
    return this.service.find<{{className}}WhereInput>(where, orderBy, limit, offset, fields);
  }

  @Query(() => {{className}})
  async {{camelName}}(@Arg('where') where: {{className}}WhereUniqueInput): Promise<{{className}}> {
    return this.service.findOne<{{className}}WhereUniqueInput>(where);
  }

  @Mutation(() => {{className}})
  async create{{className}}(
    @Arg('data') data: {{className}}CreateInput,
    @UserId() userId: string
  ): Promise<{{className}}> {
    return this.service.create(data, userId);
  }

  @Mutation(() => [{{className}}])
  async createMany{{className}}s(
    @Args() { data }: {{className}}CreateManyArgs,
    @UserId() userId: string
  ): Promise<{{className}}[]> {
    return this.service.createMany(data, userId);
  }

  @Mutation(() => {{className}})
  async update{{className}}(
    @Args() { data, where }: {{className}}UpdateArgs,
    @UserId() userId: string
  ): Promise<{{className}}> {
    return this.service.update(data, where, userId);
  }

  @Mutation(() => StandardDeleteResponse)
  async delete{{className}}(
    @Arg('where') where: {{className}}WhereUniqueInput,
    @UserId() userId: string
  ): Promise<StandardDeleteResponse> {
    return this.service.delete(where, userId);
  }
}